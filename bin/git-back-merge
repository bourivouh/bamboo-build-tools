#!/usr/bin/env python
# coding: utf-8

# $Id: $
from optparse import OptionParser
import os
import re
import sys
from bamboo.git import GitHelper
from bamboo.helpers import cerr

parser = OptionParser(
    usage='%prog [options] <project-key> <version>',
    epilog='if not task_key supplied, will take them from STDIN')
parser.add_option("-c", "--config-file", dest="configfile",
                  default='bamboo.cfg', help="read config from FILE",
                  metavar="FILE")
parser.add_option("-t", "--root", dest="root", default="^",
                  help="project root location")

options, args = parser.parse_args()
if len(args) < 2:
    parser.print_usage()
    sys.exit(-1)

int_key = args[0]
m = re.match(r'([A-Z]+)-[\d]+', int_key)
if not m:
    cerr('invalid JIRA task key: ' + int_key)
    sys.exit(-2)
release = args[1]

if not re.match(r'^[\d]+\.[\d]+\.[\d]+$', release):
    cerr('invalid version: ' + release)
    sys.exit(-2)

project_key = m.group(1)
git = GitHelper(project_key, root=options.root, configfile=options.configfile)
git.clone(os.path.join(git.temp_dir, "%s-back-merge" % project_key))


def find_versions_for_back_merge(v):
    base_versions = []
    while git.is_minor_release(v):
        base = git.base_version(v)
        base_versions.append((v, base))
        v = base
    return base_versions

for version, base_version in find_versions_for_back_merge(release):
    branch_from = git.get_stable_branch(version)
    branch_to = git.get_stable_branch(base_version)
    commit_msg = "%s back merge from %s to %s" % (int_key, branch_from, branch_to)
    git.merge(branch_from, branch_to, commit_msg)
git.push()
