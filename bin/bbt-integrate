#!/usr/bin/env python
# coding: utf-8

# $Id: $

# Все-в-одном для создания тега в рамках интеграции задачи

# 1) ищет задачи в статусе Integrating
# 2) берет задачи на себя
# 3) собирает merge-plan
# 4) мержит задачи во все stable-ветки
# 5) при отсутствии конфликтов собирает теги

from optparse import OptionParser
import os
from pprint import pprint
import re
import sys
import shutil
from bamboo.builds import Builds

from bamboo.helpers import get_stable, chdir
from bamboo.svn import SVNHelper, SVNError
from bamboo.tasks import Tasks

# Регулярка для валидной версии
VERSION_RX = r'^[\d]+\.[\d]+\.[\d]+$'

SVN_STABLE = 'branches/stable'

# тип задачи на интеграцию
INTEGRATION_ISSUE_TYPE = "Intergration Ticket"

# интегрируемые типы задач
ISSUE_TYPES = (
    "Development Ticket",
    "Development Subtask",
    "Bug Ticket",
    "Bug Subtask"
)

# статусы задач для интеграции
ISSUE_STATUS = ("Integrating",)

# пользователь для сборки
INTEGRATION_USER = "bamboo"

parser = OptionParser(usage='%prog [options] <build_key>')
parser.add_option("-c", "--config-file", dest="configfile",
                  default='bamboo.cfg', help="read config from FILE",
                  metavar="FILE")
parser.add_option("-b", "--integration-bamboo", dest="integration",
                  default=False, action="store_true",
                  help="use only tasks assigned to bamboo for integration")
parser.add_option("-t", "--root", dest="root", default="^",
                  help="svn project root location")
parser.add_option("-i", "--interactive", dest="interactive", default=False,
                  action="store_true", help="confirm actions")
parser.add_option("-p", "--package", dest="package",
                  help="package name")


options, args = parser.parse_args()
if len(args) < 1:
    parser.print_usage()
    sys.exit(-1)

try:
    build_key = args[0]
    project_key = build_key.split('-')[0]
except:
    print >> sys.stderr, "Invalid build key (expected: PROJ-INT-123)"
    sys.exit(-1)

jira = Tasks(configfile=options.configfile)
svn = SVNHelper(project_key, root=options.root, configfile=options.configfile)
builds = Builds(configfile=options.configfile)


# Ищем задачи, подлежащие сборке
tasks = jira.search_tasks(project_key, issue_type=ISSUE_TYPES,
                          status=ISSUE_STATUS)

task_assignees = {}     # task-key -> assignee
task_versions = {}      # task-key -> version-list
merge_plan = {}         # stable -> (version, task-list)
integration_tasks = {}  # version -> task-key
failed = False


def finalize(dest_status="Integrated", exit_code=0):
    # Возвращает задачи прежним assignee, ставит статус dest_status,
    # выходит из питона.
    for task_key in tasks:
        assignee = task_assignees[task_key]
        jira.move(task_key, dest_status)
        jira.assign(task_key, assignee=assignee)
    sys.exit(exit_code)


for task in tasks:
    # Сохраняем старых assignee и переставляем на bamboo
    task_assignees[task.key] = task.fields.assignee.name
    jira.assign(task.key, INTEGRATION_USER)
    versions = []
    # Собираем версии и имена stable веток, готовим план интеграции
    for v in task.fields.fixVersions:
        # Ищем только unreleased версии вида 1.0.0
        if v.archived or v.released:
            continue
        version = v.name
        if not re.match(VERSION_RX, version):
            continue
        versions.append(version)
        # Вычисляем stable-ветки для каждой из веток,
        stables = {v: get_stable(v) for v in versions}
        # Проверяем, что задача не находится одновременно в двух версиях,
        # относящихся к одной и той же stable-ветке.
        if len(set(stables.values())) != len(versions):
            version_stables = ['%s: %s' % (k, v) for k, v in stables.items()]
            print >> sys.stderr, "Incorrect stables for %s versions" % task.key
            print 'Versions: %s' % ', '.join(version_stables)
            failed = True
            continue
        # Распределяем задачи по stable-веткам
        for version, stable in stables.items():
            if stable in merge_plan:
                if merge_plan[stable][0] != version:
                    print >> sys.stderr, ("Stable %s already exists "
                                          "in merge plan" % stable)
                    failed = True
                    continue
                merge_plan[stable][1].append(task.key)
            else:
                merge_plan[stable] = (version, [task.key])
            integration_tasks[version] = None
    if not versions:
        print >> sys.stderr, "Unreleased versions not found for %s" % task.key
        failed = True
        continue
    task_versions[task.key] = versions

print "Merge plan:"
pprint(merge_plan)
if failed:
    finalize(dest_status='Integration broken', exit_code=-1)

# Ищем список задач на сборку
for version in integration_tasks.keys():
    # только Integration Ticket, принадлежащий конкретной версии
    kwargs = {
        "issue_type": INTEGRATION_ISSUE_TYPE,
        "release": version
    }
    # Для особо привередливых добавляем ограничение, что задача должна
    # стоять на bamboo
    if options.integration:
        kwargs.update(assignee=INTEGRATION_USER)
    int_tasks = jira.search_tasks(project_key, **kwargs)
    # Проверяем число задач на сборку
    if not int_tasks:
        print >> sys.stderr, 'No integration ticket for %s' % version
        failed = True
        continue
    if len(int_tasks) > 1:
        print >> sys.stderr, "More than one integration ticket for %s" % version
        print "Tickets: %s" % ', '.join(t.key for t in int_tasks)
        failed = True
        continue
    task = int_tasks[0]
    integration_tasks[version] = task
    # Переводим задачу в статус Integrating, ставим ее на bamboo
    if task.fields.status.name != ISSUE_STATUS:
        # При выполнении перехода на bamboo поставится автоматом
        jira.move(task.key, 'integrating')
    else:
        jira.assign(task.key, INTEGRATION_USER)

print "Integration tasks:"
pprint(dict((v, t.key) for v, t in integration_tasks.items()))

if failed:
    finalize(dest_status='Integration broken', exit_code=-1)

# Проверяем отсутствие задач из Backlog в ветке, из которой будет
# создаваться stable
for stable in merge_plan.keys():
    source = svn.compute_stable_source(stable)
    source = source.replace('^', options.root)
    committed_tasks = svn.log_tasks(None, branch=source)
    for task_number in committed_tasks.keys():
        task_key = '%s-%s' % (project_key, task_number)
        versions = jira.get_versions(task_key)
        for version in versions:
            if not re.match(VERSION_RX, version):
                print >> sys.stderr, "Found task %s in %s from %s" % (
                    task_key, source, version)
                failed = True

if failed:
    finalize(dest_status='Integration broken', exit_code=-1)

# Выполняем merge задач в stable без коммитов
for stable, data in merge_plan.items():
    version, tasks = data
    int_task = integration_tasks[version]
    stable_dir = 'stable-%s' % stable
    stable_path = os.path.join(options.root, SVN_STABLE, stable)
    # Создаем stable
    svn.create_stable(stable, task=int_task.key,
                      interactive=options.interactive)
    # Выполняем svn checkout в пустую директорию
    try:
        shutil.rmtree(stable_dir)
    except OSError:
        pass
    svn.checkout(stable_path, stable_dir)

    with chdir(stable_dir):
        try:
            svn.merge_tasks(int_task.key, tasks, dry_run=True)
        except SVNError as e:
            print >> sys.stderr, "Conflict found while merging to %s" % stable
            failed = True
            continue

if failed:
    finalize(dest_status='Integration broken', exit_code=-1)

# Выделяем build key из job key
build_number = build_key.split('-')[-1]
integration_build = '%s-INT-%s' % (project_key, build_number)

# коммитим изменения в stable, создаем теги
for stable, data in merge_plan.items():
    version, tasks = data
    int_task = integration_tasks[version]
    stable_dir = 'stable-%s' % stable
    stable_path = os.path.join(options.root, SVN_STABLE, stable)
    with chdir(stable_dir):
        svn.svn_commit(interactive=options.interactive)
        tag = svn.release(int_task.key, version,
                          interactive=options.interactive)
    build = '%s-%s' % (version, tag)
    plan_name = '%s-BLD' % project_key
    builds.run_plan(plan_name, ReleaseTag=build,
                    IntegrationBuild=integration_build)

finalize(dest_status="Integrated")